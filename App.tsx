import React, { useState, useCallback } from 'react';
import type { CaseResult, SearchOptions } from './types';
import { fetchImageData } from './services/geminiService';
import SearchForm from './components/SearchForm';
import ResultsDisplay from './components/ResultsDisplay';
import { FileSearchIcon } from './components/Icons';

const App: React.FC = () => {
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [results, setResults] = useState<CaseResult[]>([]);
  const [error, setError] = useState<string | null>(null);

  const handleSearch = useCallback(async (options: SearchOptions) => {
    setIsLoading(true);
    setError(null);
    setResults([]);

    const terms = options.searchTerms
      .split('\n')
      .map(term => term.trim())
      .filter(term => term.length > 0);

    if (terms.length === 0) {
      setError("Please enter at least one search term.");
      setIsLoading(false);
      return;
    }

    try {
      const promises = terms.map(term =>
        fetchImageData(term, options.language, options.imageCount)
      );
      const settledResults = await Promise.allSettled(promises);

      const successfulResults: CaseResult[] = [];
      const failedTerms: string[] = [];
      
      settledResults.forEach((result, index) => {
        if (result.status === 'fulfilled' && result.value.images.length > 0) {
          const caseResult: CaseResult = {
            searchTerm: terms[index],
            images: result.value.images.map((image, i) => ({
              ...image,
              id: `${terms[index].replace(/\s+/g, '-')}-${i}`,
              imageUrl: `data:image/jpeg;base64,${image.base64Image}`,
            })),
          };
          successfulResults.push(caseResult);
        } else {
          failedTerms.push(terms[index]);
          console.error(`Failed to fetch data for "${terms[index]}":`, result.status === 'rejected' ? result.reason : 'No images found');
        }
      });

      setResults(successfulResults);

      if (failedTerms.length > 0) {
        setError(`Could not retrieve results for: ${failedTerms.join(', ')}. Please check the terms or try again later.`);
      }

    } catch (err) {
      console.error("An unexpected error occurred:", err);
      setError("An unexpected error occurred during the search. Please check the console for details.");
    } finally {
      setIsLoading(false);
    }
  }, []);

  return (
    <div className="min-h-screen bg-gray-900 text-gray-200 font-sans">
      <header className="bg-gray-800/50 backdrop-blur-sm border-b border-gray-700 sticky top-0 z-10">
        <div className="container mx-auto px-4 py-4 flex items-center gap-4">
          <FileSearchIcon className="w-8 h-8 text-cyan-400" />
          <h1 className="text-2xl font-bold tracking-tight text-white">
            Criminal Case Image Aggregator
          </h1>
        </div>
      </header>

      <main className="container mx-auto p-4 md:p-8">
        <div className="grid grid-cols-1 lg:grid-cols-12 gap-8">
          <div className="lg:col-span-4 xl:col-span-3">
            <SearchForm onSearch={handleSearch} isLoading={isLoading} />
          </div>
          <div className="lg:col-span-8 xl:col-span-9">
            <ResultsDisplay results={results} isLoading={isLoading} error={error} />
          </div>
        </div>
      </main>
      
      <footer className="container mx-auto px-4 py-4 mt-8 text-center text-gray-500 text-sm">
        <p>This tool is a simulation. Image data is generated by AI for illustrative purposes. All visuals are placeholders.</p>
        <p>&copy; {new Date().getFullYear()} Investigative Tools Inc. All Rights Reserved.</p>
      </footer>
    </div>
  );
};

export default App;